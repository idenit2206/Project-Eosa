<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eosa.admin.mapper.CompanyMapper">

    <!-- 업체 목록 개수 조회 -->
    <select id="countCompanyList" resultType="int" parameterType="hashmap">
        SELECT COUNT(*)
        FROM Companys C
        WHERE C.companysEnabled = #{companysEnabled}
        <if test="name != null">
            AND CONCAT(C.companysName) REGEXP #{search}
        </if>
        <if test="ceo != null">
            AND CONCAT(C.companysCeoName) REGEXP #{search}
        </if>
        <if test="phone != null">
            AND CONCAT(C.companysPhone) REGEXP #{search}
        </if>
    </select>

    <!-- 업체 목록 조회 -->
    <select id="selectCompanyList" resultType="CompanysDTO" parameterType="hashmap">
        SELECT C.companysIdx,
               C.companysName,
               C.companysCeoName,
               C.companysPhone,
               C.companysDummyPhone,
               C.companysRegion1,
               C.companysRegion3,
               C.companysRegistDate,
               C.companysPremium,
               C.companysLocalPremium,
               C.companysEnabled,
               C.companysDelete,
               T.companysCategoryValue
        FROM Companys C
                JOIN (SELECT CT.companysIdx,
                             GROUP_CONCAT(CT.companysCategoryValue SEPARATOR '|') companysCategoryValue
                      FROM CompanysCategory CT
                      GROUP BY CT.companysIdx) T ON C.companysIdx = T.companysIdx
        WHERE C.companysEnabled = #{companysEnabled}
        <if test="name != null">
            AND CONCAT(C.companysName) REGEXP #{search}
        </if>
        <if test="ceo != null">
            AND CONCAT(C.companysCeoName) REGEXP #{search}
        </if>
        <if test="phone != null">
            AND CONCAT(C.companysPhone) REGEXP #{search}
        </if>
        ORDER BY C.companysRegistDate DESC LIMIT #{startIndex}, #{pageSize}
    </select>

    <!-- 업체 상세 조회 -->
    <select id="selectCompanyDetails" resultType="CompanysDTO">
        SELECT C.companysIdx,
               C.companysName,
               C.companysCeoName,
               C.companysComment,
               C.companysSpec,
               C.companysPhone,
               C.companysRegion1,
               C.companysRegion3,
               C.companysRegistCerti,
               C.companysRegistCertiName,
               C.companysRegistCertiDate,
               C.companysRegistCertiCheck,
               C.companysLicense,
               C.companysLicenseName,
               C.companysLicenseCheck,
               C.companysProfileImage,
               C.companysProfileImageName,
               C.companysBankName,
               C.companysBankNumber,
               C.companysRegistDate,
               C.companysPremium,
               C.companysLocalPremium,
               C.companysEnabled,
               C.companysDelete,
               C.companysDummyPhone,
               C.companysMemo,
               A.activeRegion,
               T.companysCategoryValue,
               P.idx,
               P.premiumReqDate,
               P.premiumStartDate,
               P.premiumEndDate,
               P.companysPremiumEnabled,
               B.companysFlagIdx,
               B.flagPrice,
               B.flagPriceBank,
               B.flagReqDate,
               B.flagStartDate,
               B.flagEndDate,
               B.companysFlagEnabled,
               B.companysFlagRegion1,
               B.companysFlagCategory,
               RV.reviewCount,
               RF.reportCount
        FROM Companys C
                 JOIN (SELECT AR.companysIdx,
                              GROUP_CONCAT(AR.activeRegion SEPARATOR '|') activeRegion
                       FROM CompanysActiveRegion AR
                       GROUP BY AR.companysIdx) A ON C.companysIdx = A.companysIdx
                 JOIN (SELECT CT.companysIdx,
                              GROUP_CONCAT(CT.companysCategoryValue SEPARATOR '|') companysCategoryValue
                       FROM CompanysCategory CT
                       GROUP BY CT.companysIdx) T ON C.companysIdx = T.companysIdx
                 LEFT OUTER JOIN CompanysPremium P ON C.companysIdx = P.companysIdx
                 LEFT OUTER JOIN (SELECT F.companysFlagIdx,
                                         F.companysIdx,
                                         F.companysName,
                                         F.flagPrice,
                                         F.flagPriceBank,
                                         F.flagReqDate,
                                         F.flagStartDate,
                                         F.flagEndDate,
                                         F.companysFlagEnabled,
                                         CR.companysFlagRegion1,
                                         FCT.companysFlagCategory
                                  FROM CompanysFlag F
                                           JOIN CompanysFlagRegion CR on F.companysFlagIdx = CR.companysFlagIdx
                                           JOIN (SELECT FT.companysFlagIdx,
                                                        GROUP_CONCAT(FT.companysFlagCategory SEPARATOR '|') companysFlagCategory
                                                 FROM CompanysFlagCategory FT
                                                 GROUP BY FT.companysFlagIdx) FCT ON F.companysFlagIdx = FCT.companysFlagIdx) B
                                 ON C.companysIdx = B.companysIdx
                 LEFT OUTER JOIN (SELECT COUNT(UR.reviewCompanysIdx) reviewCount,
                                         UR.reviewCompanysIdx
                                  FROM UsersReview UR
                                  GROUP BY UR.reviewCompanysIdx) RV ON C.companysIdx = RV.reviewCompanysIdx
                 LEFT OUTER JOIN (SELECT COUNT(R.companysIdx) reportCount,
                                         R.companysIdx
                                  FROM ReportForm R
                                  GROUP BY R.companysIdx) RF ON C.companysIdx = RF.companysIdx
        WHERE C.companysIdx = #{companysIdx}
    </select>

    <!-- 업체 삭제 -->
    <delete id="deleteCompanys" parameterType="Long">
        DELETE FROM Companys
        WHERE companysIdx = #{companysIdx}
    </delete>
    <!-- 업체 삭제 -->
    <!-- <update id="deleteCompanys" parameterType="Long">
        UPDATE Companys
        SET companysPremium = 0, companysLocalPremium = 0, companysEnabled = 0, companysDelete = 1
        WHERE companysIdx = #{companysIdx}
    </update> -->

    <!-- 업체 수정 -->
    <update id="updateCompanys" parameterType="CompanysDTO">
        UPDATE Companys
        SET companysName       = #{companysName},
            companysComment    = #{companysComment},
            companysSpec       = #{companysSpec},
            companysPhone      = #{companysPhone},
            companysRegion1    = #{companysRegion1},
            companysRegion3    = #{companysRegion3},
            companysBankName   = #{companysBankName},
            companysBankNumber = #{companysBankNumber},
            companysEnabled    = #{companysEnabled},
            <if test="companysDummyPhone != null">
                companysDummyPhone = #{companysDummyPhone},
            </if>
            <if test="companysDummyPhone == ''">
                companysDummyPhone = NULL,
            </if>
            companysMemo       = #{companysMemo}
        WHERE companysIdx = #{companysIdx}
    </update>

    <!-- 업체 활동 지역 등록 -->
    <insert id="insertCompanysRegion" parameterType="hashmap">
        INSERT INTO CompanysActiveRegion (companysIdx,
                                          activeRegion)
        VALUES (#{companysIdx},
                #{activeRegion})
    </insert>

    <!-- 업체 활동 지역 삭제 -->
    <delete id="deleteCompanysRegion" parameterType="long">
        DELETE
        FROM CompanysActiveRegion
        WHERE companysIdx = #{companysIdx}
    </delete>

    <!-- 업체 분야 등록 -->
    <insert id="insertCompanysCategory" parameterType="hashmap">
        INSERT INTO CompanysCategory (companysIdx,
                                      companysCategoryValue)
        VALUES (#{companysIdx},
                #{companysCategoryValue})
    </insert>

    <!-- 업체 분야 삭제 -->
    <delete id="deleteCompanysCategory" parameterType="long">
        DELETE
        FROM CompanysCategory
        WHERE companysIdx = #{companysIdx}
    </delete>

    <!-- CompanysMember 삭제 -->
    <delete id="deleteCompanysMember" parameterType="long">
        DELETE
        FROM CompanysMember
        WHERE companysIdx= #{companysIdx}
    </delete>

    <!-- 업체 인증 -->
    <update id="updateCheck" parameterType="hashmap">
        UPDATE Companys
        SET
            <if test="sort == 0">
                companysRegistCertiCheck = #{num}
            </if>
            <if test="sort == 1">
                companysLicenseCheck = #{num}
            </if>
        WHERE companysIdx = #{companysIdx}
    </update>

    <!-- 업체 제휴협회 신청 -->
    <insert id="insertPremium" parameterType="CompanysDTO">
        INSERT INTO CompanysPremium (companysIdx,
                                     companysName,
                                     companysCeoName,
                                     premiumReqDate)
        VALUES (#{companysIdx},
                #{companysName},
                #{companysCeoName},
                NOW())
    </insert>

    <!-- 업체 제휴협회 등록 -->
    <update id="updatePremium" parameterType="CompanysDTO">
        UPDATE CompanysPremium
        SET premiumStartDate       = #{premiumStartDate},
            premiumEndDate         = #{premiumEndDate},
            companysPremiumEnabled = 1
        WHERE companysIdx = #{companysIdx}
    </update>

    <!-- 업체 제휴협회 해지 -->
    <update id="cancelPremium" parameterType="long">
        UPDATE CompanysPremium
        SET premiumStartDate       = NULL,
            premiumEndDate         = NULL,
            companysPremiumEnabled = 0
        WHERE companysIdx = #{companysIdx}
    </update>

    <!-- 업체 제휴협회 삭제 -->
    <delete id="deletePremium" parameterType="long">
        
    </delete>

    <!-- 업체 마패 신청 -->
    <insert id="insertFlag" parameterType="CompanysDTO" useGeneratedKeys="true" keyProperty="companysFlagIdx">
        INSERT INTO CompanysFlag (companysIdx,
                                  companysName,
                                  companysCeoName,
                                  flagPrice,
                                  flagPriceBank,
                                  flagReqDate)
        VALUES (#{companysIdx},
                #{companysName},
                #{companysCeoName},
                #{flagPrice},
                #{flagPriceBank},
                NOW())
    </insert>

    <!-- 업체 마패 분야 등록 -->
    <insert id="insertFlagCategory" parameterType="CompanysDTO">
        INSERT INTO CompanysFlagCategory (companysFlagIdx,
                                          companysFlagCategory)
        VALUES (#{companysFlagIdx},
                #{companysFlagCategory})
    </insert>

    <!-- 업체 마패 분야 삭제 -->
    <delete id="deleteFlagCategory" parameterType="long">
        DELETE
        FROM CompanysFlagCategory
        WHERE companysFlagIdx = #{companysFlagIdx}
    </delete>

    <!-- 업체 마패 지역 등록 -->
    <insert id="insertFlagRegion" parameterType="CompanysDTO">
        INSERT INTO CompanysFlagRegion (companysFlagIdx,
                                        companysFlagRegion1)
        VALUES (#{companysFlagIdx},
                #{companysFlagRegion1})
    </insert>

    <!-- 업체 마패 지역 수정 -->
    <update id="updateFlagRegion" parameterType="CompanysDTO">
        UPDATE CompanysFlagRegion
        SET companysFlagRegion1 = #{companysFlagRegion1}
        WHERE companysFlagIdx = #{companysFlagIdx}
    </update>

    <!-- 업체 금액 수정 -->
    <update id="updateFlagPrice" parameterType="CompanysDTO">
        UPDATE CompanysFlag
        SET flagPrice = #{flagPrice}
        WHERE companysFlagIdx = #{companysFlagIdx}
    </update>

    <!-- 업체 마패 등록 -->
    <update id="updateFlag" parameterType="CompanysDTO">
        UPDATE CompanysFlag
        SET flagStartDate       = #{flagStartDate},
            flagEndDate         = #{flagEndDate},
            companysFlagEnabled = 1
        WHERE companysIdx = #{companysIdx}
    </update>

    <!-- 업체 마패 해지 -->
    <update id="cancelFlag" parameterType="long">
        UPDATE CompanysFlag
        SET flagStartDate       = NULL,
            flagEndDate         = NULL,
            companysFlagEnabled = 0
        WHERE companysIdx = #{companysIdx}
    </update>

    <!-- 업체 광고 상태 변경 -->
    <update id="updateAd" parameterType="hashmap">
        UPDATE Companys
        SET
            <if test="sort == 'premium'">
                companysPremium = #{num}
            </if>
            <if test="sort == 'flag'">
                companysLocalPremium = #{num}
            </if>
        WHERE companysIdx = #{companysIdx}
    </update>

    <!-- 제휴협회 목록 개수 조회 -->
    <select id="countPremiumList" resultType="int" parameterType="hashmap">
        SELECT COUNT(*)
        FROM CompanysPremium P
        <where>
            <if test="enabled != null">
                AND P.companysPremiumEnabled = #{enabled}
            </if>
        </where>
    </select>

    <!-- 제휴협회 목록 조회 -->
    <select id="selectPremiumList" resultType="CompanysDTO" parameterType="hashmap">
        SELECT C.companysIdx,
               C.companysName,
               C.companysCeoName,
               C.companysPhone,
               C.companysBankName,
               C.companysBankNumber,
               P.premiumReqDate,
               P.premiumStartDate,
               P.premiumEndDate,
               P.companysPremiumEnabled
        FROM CompanysPremium P
                 JOIN Companys C on P.companysIdx = C.companysIdx
        <where>
            <if test="enabled != null">
                AND P.companysPremiumEnabled = #{enabled}
            </if>
        </where>
        ORDER BY P.premiumReqDate DESC LIMIT #{startIndex}, #{pageSize}
    </select>

    <!-- 마패 목록 개수 조회 -->
    <select id="countFlagList" resultType="int" parameterType="hashmap">
        SELECT COUNT(*)
        FROM CompanysFlag F
        <where>
            <if test="enabled != null">
                AND F.companysFlagEnabled = #{enabled}
            </if>
        </where>
    </select>

    <!-- 마패 목록 조회 -->
    <select id="selectFlagList" resultType="CompanysDTO" parameterType="hashmap">
        SELECT C.companysIdx,
               C.companysName,
               C.companysCeoName,
               C.companysPhone,
               C.companysBankName,
               C.companysBankNumber,
               F.flagReqDate,
               F.flagStartDate,
               F.flagEndDate,
               F.companysFlagEnabled,
               R.companysFlagRegion1
        FROM CompanysFlag F
                 JOIN Companys C on F.companysIdx = C.companysIdx
                 JOIN CompanysFlagRegion R ON R.companysFlagIdx = F.companysFlagIdx
        <where>
            <if test="enabled != null">
                AND F.companysFlagEnabled = #{enabled}
            </if>
        </where>
        ORDER BY F.flagReqDate DESC LIMIT #{startIndex}, #{pageSize}
    </select>

    <!-- 업체 리뷰, 신고 개수 조회 -->
    <!-- <select id="countReviewReport" resultType="Integer" parameterType="hashmap">
        SELECT COUNT(*)
        FROM UsersReview
        WHERE reviewCompanysIdx = #{companysIdx}
        UNION ALL
        SELECT COUNT(*)
        FROM ReportForm
        WHERE companysIdx = #{companysIdx}
    </select> -->
    <select id="countReviewReport" resultType="Integer" parameterType="hashmap">
        SELECT COUNT(*)
        FROM UsersReviewBackup
        WHERE reviewCompanysIdx = #{companysIdx}
        UNION ALL
        SELECT COUNT(*)
        FROM ReportForm
        WHERE companysIdx = #{companysIdx}
    </select>

    <!-- 업체 리뷰 조회 -->
    <!-- <select id="selectCompanysReview" resultType="ReviewDTO" parameterType="hashmap">
        SELECT R.idx,
               R.reviewCompanysIdx,
               R.resultScore,
               R.communicationScore,
               R.processScore,
               R.specialityScore,
               ROUND((R.resultScore + R.communicationScore + R.processScore + R.specialityScore) / 4, 2) average,
               R.reviewDetail,
               R.reviewDate,
               U.usersAccount,
               U.usersName,
               U.usersNick,
               C.companysName
        FROM UsersReview R
                 JOIN Users U ON R.reviewUsersIdx = U.usersIdx
                 JOIN Companys C ON R.reviewCompanysIdx = C.companysIdx
        WHERE R.reviewCompanysIdx = #{companysIdx}
        ORDER BY R.reviewDate DESC LIMIT #{startIndex}, #{pageSize}
    </select> -->
    <select id="selectCompanysReview" resultType="ReviewDTO" parameterType="hashmap">
        SELECT R.usersReviewIdx,
               R.reviewCompanysIdx,
               R.resultScore,
               R.communicationScore,
               R.processScore,
               R.specialityScore,
               ROUND((R.resultScore + R.communicationScore + R.processScore + R.specialityScore) / 4, 2) average,
               R.reviewDetail,
               R.reviewDate,
               U.usersAccount,
               U.usersName,
               U.usersNick,
               C.companysName
        FROM UsersReviewBackup R
                 JOIN Users U ON R.reviewUsersIdx = U.usersIdx
                 JOIN Companys C ON R.reviewCompanysIdx = C.companysIdx
        WHERE R.reviewCompanysIdx = #{companysIdx}
        ORDER BY R.reviewDate DESC LIMIT #{startIndex}, #{pageSize}
    </select>

    <!-- 업체 신고 개수 조회 -->
    <select id="countCompanysReport" resultType="int" parameterType="hashmap">
        SELECT COUNT(*)
        FROM ReportForm R
        WHERE R.companysIdx = #{companysIdx}
        <if test="state != null">
            AND R.reportCheckState = #{state}
        </if>
    </select>

    <!-- 업체 신고 조회 -->
    <select id="selectCompanysReport" resultType="ReportDTO" parameterType="hashmap">
        SELECT R.idx,
               R.usersIdx,
               R.companysIdx,
               R.reportDetail,
               R.reportCheckState,
               R.reportDate,
               R.reportCheckDate,
               U.usersAccount,
               C.companysName
        FROM ReportForm R
                 JOIN Users U ON R.usersIdx = U.usersIdx
                 JOIN Companys C ON R.companysIdx = C.companysIdx
        WHERE R.companysIdx = #{companysIdx}
        <if test="state != null">
            AND R.reportCheckState = #{state}
        </if>
        ORDER BY R.reportDate DESC LIMIT #{startIndex}, #{pageSize}
    </select>

    <!-- 통계 목록 개수 조회 -->
    <select id="countChartList" resultType="int" parameterType="hashmap">
        SELECT COUNT(*)
        FROM Companys C
        <where>
            <if test="sort == 'company'">
                AND CONCAT(C.companysName) REGEXP #{search}
            </if>
        </where>
    </select>

    <!-- 통계 목록 조회 -->
    <select id="selectChartList" resultType="ChartDTO" parameterType="hashmap">
        SELECT C.companysIdx,
               C.companysName,
               C.companysRegistDate,
               CR.activeRegion,
               RQ.requestCount,
               RV.average
        FROM Companys C
                 JOIN (SELECT CAR.companysIdx,
                              GROUP_CONCAT(CAR.activeRegion SEPARATOR '|') activeRegion
                       FROM CompanysActiveRegion CAR
                       GROUP BY CAR.companysIdx) CR ON C.companysIdx = CR.companysIdx
                 LEFT JOIN (SELECT RF.companysIdx,
                                   COUNT(RF.companysIdx) requestCount
                            FROM RequestForm RF
                            GROUP BY RF.companysIdx) RQ ON C.companysIdx = RQ.companysIdx
                 LEFT JOIN (SELECT UR.reviewCompanysIdx,
                                   ROUND(SUM((UR.resultScore + UR.communicationScore + UR.processScore + UR.specialityScore) / 4) / COUNT(*), 2) average
                            FROM UsersReview UR
                            GROUP BY UR.reviewCompanysIdx) RV ON C.companysIdx = RV.reviewCompanysIdx
        <where>
            <if test="sort == 'company'">
                AND CONCAT(C.companysName) REGEXP #{search}
            </if>
        </where>
        ORDER BY C.companysRegistDate DESC LIMIT #{startIndex}, #{pageSize}
    </select>

    <!-- 업체 개수 조회 -->
    <!-- <select id="countCompany" resultType="int">
        SELECT COUNT(*)
        FROM Companys
    </select> -->
    <select id="countCompany" resultType="int">
        SELECT COUNT(DISTINCT reviewCompanysIdx)
        FROM UsersReviewBackup
    </select>

    <!-- 전체 통계 조회 -->
    <select id="selectChart" resultType="ChartDTO">
        SELECT RF.requestFormRegion1,
               RF.requestFormDate,
               IFNULL(U.usersAge, 0) usersAge
        FROM RequestFormBackup RF
                 LEFT JOIN Users U on RF.usersIdx = U.usersIdx
    </select>

    <!-- 분야 통계 조회 -->
    <select id="selectCategoryChart" resultType="ChartDataDTO">
        SELECT C.categoryName,
               COUNT(R.requestFormCategoryValue) num
        FROM Category C
                 LEFT JOIN RequestFormCategory R ON C.categoryName = R.requestFormCategoryValue
        GROUP BY C.categoryName;
    </select>

    <!-- 업체 통계 조회 -->
    <select id="selectCompanyChart" resultType="ChartDTO" parameterType="long">
        SELECT RF.requestFormRegion1,
               RF.requestFormDate,
               IFNULL(U.usersAge, 0) usersAge
        FROM RequestForm RF
                 LEFT JOIN Users U on RF.usersIdx = U.usersIdx
        WHERE RF.companysIdx = #{companysIdx}
    </select>

    <!-- 업체 분야 통계 조회 -->
    <select id="selectCompanyCategoryChart" resultType="ChartDataDTO" parameterType="long">
        SELECT C.categoryName,
               COUNT(R.requestFormCategoryValue) num
        FROM Category C
                 LEFT JOIN (SELECT RC.requestFormCategoryValue
                            FROM RequestFormCategory RC
                                     LEFT JOIN RequestForm RF ON RC.requestFormIdx = RF.requestFormIdx
                                     LEFT JOIN Companys CP ON RF.companysIdx = CP.companysIdx
                            WHERE CP.companysIdx = #{companysIdx}) R ON C.categoryName = R.requestFormCategoryValue
        GROUP BY C.categoryName;
    </select>

</mapper>
